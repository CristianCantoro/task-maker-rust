use crate::proto::*;
use crate::*;
use failure::{Error, Fail};
use std::collections::HashMap;
use std::path::Path;
use std::sync::mpsc::channel;
use std::sync::{Arc, Mutex};
use std::thread;
use task_maker_dag::*;
use task_maker_store::*;
use uuid::Uuid;

/// The information about the current job the worker is doing.
struct WorkerCurrentJob {
    /// Job currently waiting for, when there is a job running this should be `None`
    current_job: Option<(Box<WorkerJob>, HashMap<FileUuid, FileStoreHandle>)>,
    /// The currently running sandbox.
    current_sandbox: Option<Sandbox>,
    /// The number of missing files that are required for the sandbox setup.
    missing_deps: usize,
}

/// The worker is the component that receives the work from the server and sends the results back.
/// It computes the results by executing a process inside a sandbox, limiting the available
/// resources and measuring the used ones.
pub(crate) struct Worker {
    /// The identifier of this worker.
    uuid: WorkerUuid,
    /// The name of this worker.
    name: String,
    /// The channel that sends messages to the server.
    sender: ChannelSender,
    /// The channel that receives messages from the server.
    receiver: ChannelReceiver,
    /// A reference to the [`FileStore`](../task_maker_store/struct.FileStore.html).
    file_store: Arc<Mutex<FileStore>>,
    /// Job the worker is currently working on.
    current_job: Arc<Mutex<WorkerCurrentJob>>,
    /// Where to put the sandboxes.
    sandbox_path: PathBuf,
}

/// An handle of the connection to the worker.
pub(crate) struct WorkerConn {
    /// The identifier of the worker.
    pub uuid: WorkerUuid,
    /// The name of the worker.
    pub name: String,
    /// The channel that sends messages to the worker.
    pub sender: ChannelSender,
    /// The channel that receives messages from the server.
    pub receiver: ChannelReceiver,
}

/// An error generated by the worker.
#[derive(Debug, Fail)]
enum WorkerError {
    /// A dependency key is missing from the list of file dependencies.
    #[fail(display = "missing key for dependency {}", uuid)]
    MissingDependencyKey { uuid: Uuid },
}

impl WorkerCurrentJob {
    /// Make a new [`WorkerCurrentJob`](struct.WorkerCurrentJob.html).
    fn new() -> WorkerCurrentJob {
        WorkerCurrentJob {
            current_job: None,
            current_sandbox: None,
            missing_deps: 0,
        }
    }

    /// Keeps track that a new dependency is ready, will panic if no new file were expected. Will
    /// return true if all the dependencies are ready.
    fn dependency_received(&mut self) -> bool {
        assert!(
            self.missing_deps > 0,
            "a new dep is ready but no deps were waiting"
        );
        self.missing_deps -= 1;
        self.missing_deps == 0
    }
}

impl Worker {
    /// Make a new worker attached to a [`FileStore`](../task_maker_store/struct.FileStore.html),
    /// will return a pair with the actual `Worker` and an handle with the channels to connect to
    /// communicate with the worker.
    pub fn new<S: Into<String>, P: Into<PathBuf>>(
        name: S,
        file_store: Arc<Mutex<FileStore>>,
        sandbox_path: P,
    ) -> (Worker, WorkerConn) {
        let (tx, rx_worker) = channel();
        let (tx_worker, rx) = channel();
        let uuid = Uuid::new_v4();
        let name = name.into();
        let sandbox_path = sandbox_path.into();
        (
            Worker {
                uuid,
                name: name.clone(),
                sender: tx_worker,
                receiver: rx_worker,
                file_store,
                current_job: Arc::new(Mutex::new(WorkerCurrentJob::new())),
                sandbox_path,
            },
            WorkerConn {
                uuid,
                name,
                sender: tx,
                receiver: rx,
            },
        )
    }

    /// The worker body, this function will block until the worker disconnects.
    pub fn work(self) -> Result<(), Error> {
        trace!("Worker {} ready, asking for work", self);
        serialize_into(&WorkerClientMessage::GetWork, &self.sender)?;

        let start_job = || -> Result<(), Error> {
            let sandbox = execute_job(self.current_job.clone(), &self.sender, &self.sandbox_path)?;
            self.current_job.lock().unwrap().current_sandbox = Some(sandbox);
            Ok(())
        };

        loop {
            let message = deserialize_from::<WorkerServerMessage>(&self.receiver);
            match message {
                Ok(WorkerServerMessage::Work(job)) => {
                    trace!("Worker {} got job: {:?}", self, job);
                    assert!(self.current_job.lock().unwrap().current_job.is_none());
                    let mut missing_deps = 0;
                    let mut handles = HashMap::new();
                    for input in job.execution.dependencies().iter() {
                        let mut store = self.file_store.lock().unwrap();
                        let key = job
                            .dep_keys
                            .get(&input)
                            .ok_or(WorkerError::MissingDependencyKey { uuid: *input })?;
                        match store.get(&key) {
                            None => {
                                serialize_into(
                                    &WorkerClientMessage::AskFile(*input),
                                    &self.sender,
                                )?;
                                missing_deps += 1;
                            }
                            Some(handle) => {
                                handles.insert(*input, handle);
                            }
                        }
                    }
                    {
                        let mut current_job = self.current_job.lock().unwrap();
                        current_job.missing_deps = missing_deps;
                        current_job.current_job = Some((job, handles));
                    }
                    if missing_deps == 0 {
                        start_job()?;
                    }
                }
                Ok(WorkerServerMessage::ProvideFile(uuid, key)) => {
                    info!("Server sent file {} {:?}", uuid, key);
                    let mut store = self.file_store.lock().unwrap();
                    let reader = ChannelFileIterator::new(&self.receiver);
                    let handle = store.store(&key, reader)?;
                    let mut job = self.current_job.lock().unwrap();
                    job.current_job
                        .as_mut()
                        .expect("Received file while doing nothing")
                        .1
                        .insert(uuid, handle);
                    if job.dependency_received() {
                        start_job()?;
                    }
                }
                Err(e) => {
                    let cause = e.find_root_cause().to_string();
                    if cause == "receiving on a closed channel" {
                        trace!("Connection closed: {}", cause);
                        if let Some(sandbox) =
                            self.current_job.lock().unwrap().current_sandbox.as_ref()
                        {
                            sandbox.kill();
                        }
                        break;
                    } else {
                        error!("Connection error: {}", cause);
                    }
                }
            }
        }
        Ok(())
    }
}

/// Spawn a new thread that will start the sandbox and will send the results back to the server.
fn execute_job(
    current_job: Arc<Mutex<WorkerCurrentJob>>,
    sender: &ChannelSender,
    sandbox_path: &Path,
) -> Result<Sandbox, Error> {
    let (job, mut sandbox) = {
        let current_job = current_job.lock().unwrap();
        let job = current_job.current_job.as_ref().unwrap();
        (
            job.0.clone(),
            Sandbox::new(sandbox_path, &job.0.execution, &job.1)?,
        )
    };
    if job.execution.config().keep_sandboxes {
        sandbox.keep();
    }
    let thread_sender = sender.clone();
    let thread_sandbox = sandbox.clone();
    let thread_job = job.clone();
    thread::Builder::new()
        .name(format!("Sandbox of {}", job.execution.description))
        .spawn(move || {
            let sender = thread_sender;
            let sandbox = thread_sandbox;
            let job = thread_job;

            let result = sandbox.run().unwrap();
            let result = compute_execution_result(&job.execution, result);

            let mut outputs = HashMap::new();
            let mut output_paths = HashMap::new();
            if let Some(stdout) = job.execution.stdout {
                let path = sandbox.stdout_path();
                outputs.insert(stdout.uuid, FileStoreKey::from_file(&path).unwrap());
                output_paths.insert(stdout.uuid, path);
            }
            if let Some(stderr) = job.execution.stderr {
                let path = sandbox.stderr_path();
                outputs.insert(stderr.uuid, FileStoreKey::from_file(&path).unwrap());
                output_paths.insert(stderr.uuid, path);
            }
            for (path, file) in job.execution.outputs.iter() {
                let path = sandbox.output_path(path);
                outputs.insert(file.uuid, FileStoreKey::from_file(&path).unwrap());
                output_paths.insert(file.uuid, path.clone());
            }

            serialize_into(
                &WorkerClientMessage::WorkerDone(result, outputs.clone()),
                &sender,
            )
            .unwrap();

            for (uuid, key) in outputs.into_iter() {
                serialize_into(&WorkerClientMessage::ProvideFile(uuid, key), &sender).unwrap();
                ChannelFileSender::send(&output_paths[&uuid], &sender).unwrap();
            }

            current_job.lock().unwrap().current_job = None;
            current_job.lock().unwrap().current_sandbox = None;
            serialize_into(&WorkerClientMessage::GetWork, &sender).unwrap();
        })?;
    Ok(sandbox)
}

/// Compute the [`ExecutionResult`](../task_maker_dag/struct.ExecutionResult.html) based on the
/// result of the sandbox.
fn compute_execution_result(execution: &Execution, result: SandboxResult) -> ExecutionResult {
    match result {
        SandboxResult::Success {
            exit_status,
            signal,
            resources,
            was_killed,
        } => ExecutionResult {
            status: execution.status(exit_status, signal, &resources),
            resources,
            was_killed,
            was_cached: false,
        },
        SandboxResult::Failed { error } => ExecutionResult {
            status: ExecutionStatus::InternalError(error.to_string()),
            resources: ExecutionResourcesUsage {
                cpu_time: 0.0,
                sys_time: 0.0,
                wall_time: 0.0,
                memory: 0,
            },
            was_killed: false,
            was_cached: false,
        },
    }
}

impl std::fmt::Display for WorkerConn {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "'{}' ({})", self.name, self.uuid)
    }
}

impl std::fmt::Display for Worker {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "'{}' ({})", self.name, self.uuid)
    }
}
